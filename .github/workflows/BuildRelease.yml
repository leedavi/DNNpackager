name: Build Release

on:
  create:

jobs:
  build:

    runs-on: ubuntu-latest
    if: ${{ github.event.ref_type == 'branch' && startsWith(github.event.ref, 'release/') }}

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    #- name: Add msbuild to PATH
    #  uses: microsoft/setup-msbuild@v1.1

    - name: Restore dependencies
      run: dotnet restore DNNpackager.csproj

    - name: Get Release Branch Version
      uses: valadas/get-release-branch-version@v1.0.1
      id: branchVersion

    - name: Build
      run: dotnet build DNNpackager.csproj --no-restore --configuration Release

    #- name: Build Install
    #  run: msbuild ./DNNpackagerInstall/DNNpackagerInstall.vdproj -property:Configuration=Release -t:rebuild -verbosity:minimal

    - name: Pack
      run: dotnet pack DNNpackager.csproj
      
    - name: Create Release Notes
      uses: johnyherangi/create-release-notes@main
      id: create-release-notes
      env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      with:
          tag_name: v${{ steps.branchVersion.outputs.major }}.${{ steps.branchVersion.outputs.minor }}.${{ steps.branchVersion.outputs.patch }}
          release_name: DnnPackager v${{ steps.branchVersion.outputs.major }}.${{ steps.branchVersion.outputs.minor }}.${{ steps.branchVersion.outputs.patch }}
          body: ${{ steps.create-release-notes.outputs.release-notes }}
          draft: true
          prerelease: true

    - name: Create Nuget Feed Source
      run: dotnet nuget add source --username WorkflowRunner --password ${{ secrets.CI_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/openstore-ecommerce/index.json"

    #- name: Push Nuget
    #  run: dotnet nuget push "bin/**.nupkg" --skip-duplicate --api-key ${{ secrets.CI_TOKEN }} --source "https://nuget.pkg.github.com/openstore-ecommerce/index.json"

    - name: Create Zip Archive 
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        directory: ./bin/netcoreapp3.1
        filename: 'DNNpackager_v${{ steps.branchVersion.outputs.major }}.${{ steps.branchVersion.outputs.minor }}.${{ steps.branchVersion.outputs.patch }}.zip'
        exclusions: '*.json *.pdb'

    - name: Upload Zip Release Asset
      id: upload-release-zip
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./bin/netcoreapp3.1/DNNpackager_v${{ steps.branchVersion.outputs.major }}.${{ steps.branchVersion.outputs.minor }}.${{ steps.branchVersion.outputs.patch }}.zip
          asset_name: DNNpackager_v${{ steps.branchVersion.outputs.major }}.${{ steps.branchVersion.outputs.minor }}.${{ steps.branchVersion.outputs.patch }}.zip
          asset_content_type: application/zip

  

    #- name: Upload .msi Release Asset
    #  id: upload-release-msi 
    #  uses: actions/upload-release-asset@v1
    #  env:
    #      GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
    #  with:
    #      upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #      asset_path: ./DNNpackagerInstall/Release/DNNpackagerInstall.msi
    #      asset_name: DNNpackagerInstall.msi
    #      asset_content_type: application/x-msi

    #- name: Upload .exe Release Asset
    #  id: upload-release-exe 
    #  uses: actions/upload-release-asset@v1
    #  env:
    #      GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
    #  with:
    #      upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #      asset_path: ./DNNpackagerInstall/Release/setup.exe
    #      asset_name: setup.exe
    #      asset_content_type: application/octet-stream